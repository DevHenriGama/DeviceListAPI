unit DeviceList.Business.Device;

interface

uses
   Objects,
  System.Generics.Collections, DeviceList.DataObject.Interfaces,
  DeviceList.Business.Interfaces, DeviceList.DataObjects.Instructions;


type

  TDevice = class(TDeviceInstruction)
  private
    FDeviceID: Integer;
    FDeviceName: String;
    FDeviceAddress: String;
  public
    constructor Create;
    Destructor Destroy;override;
    class function New : IDevice;
    function GetRequestCountToday  :Integer;
    function GetDaysRequestCount : TDaysRequestCount;
    function GetContents: TList<Devices>;
    function DevicesCount : Integer;
    function LogCount : Integer;
    procedure AddLogRequest(_Type: String);
    function GetLogsRequests: TList<RequestValues>;
    function SetID(_id: Integer): IDevice;
    function GetID : Integer;
    function SetDeviceName(_name: String): IDevice;
    function GetDeviceName : String;
    function SetDeviceAddress(_address: String): IDevice;
    function GetDeviceAddress : String;
    procedure NewDevice;
    procedure DeleteDevice;
    procedure EditDevice;
  end;

implementation


{ TDevice }

procedure TDevice.AddLogRequest(_Type: String);
begin
 Instructions.AddLogRequest(_Type);
end;

constructor TDevice.Create;
begin
 Instructions := TDeviceInstruction.Create(Self);
end;

procedure TDevice.DeleteDevice;
begin
  Instructions.Delete;
end;

destructor TDevice.Destroy;
begin
   Instructions.Free;
  inherited;
end;

function TDevice.DevicesCount: Integer;
begin
 Result := Instructions.DevicesCount;
end;

procedure TDevice.EditDevice;
begin
  Instructions.Update;
end;

function TDevice.GetContents: TList<Devices>;
begin
 Result := Instructions.GetContents;
end;

function TDevice.GetDaysRequestCount: TDaysRequestCount;
begin
 Result := Instructions.GetDaysRequestCount;
end;

function TDevice.GetDeviceAddress: String;
begin
 Result := FDeviceAddress;
end;

function TDevice.GetDeviceName: String;
begin
 Result := FDeviceName;
end;

function TDevice.GetID: Integer;
begin
 Result := FDeviceID;
end;

function TDevice.GetLogsRequests: TList<RequestValues>;
begin
 Result := Instructions.GetLogsRequests;
end;

function TDevice.GetRequestCountToday: Integer;
begin
Result := Instructions.GetRequestCountToday;
end;

function TDevice.LogCount: Integer;
begin
Result := Instructions.LogCount;
end;

class function TDevice.New: IDevice;
begin
Result := Self.Create;
end;

procedure TDevice.NewDevice;
begin
 Instructions.Insert;
end;

function TDevice.SetDeviceAddress(_address: String): IDevice;
begin
 Result := Self;
 FDeviceAddress := _address;
end;

function TDevice.SetDeviceName(_name: String): IDevice;
begin
 Result := Self;
 FDeviceName := _name;
end;

function TDevice.SetID(_id: Integer): IDevice;
begin
Result := Self;
FDeviceID := _id;
end;

end.
